
import turtle    # Para gr치ficos y animaci칩n
import time      # Para controlar la velocidad del juego
import random    # Para generar posiciones aleatorias de la comida

delay = 0.07     # Velocidad del juego (menos = m치s r치pido)
score = 0        # Puntuaci칩n actual
high_score = 0   # Mejor puntuaci칩n

wn = turtle.Screen()
wn.title("Juego de la Serpiente 游냀")  # T칤tulo con emoji
wn.bgcolor("black")                   # Fondo negro
wn.setup(width=600, height=600)       # Tama침o de la ventana
wn.tracer(0)                          # Desactiva actualizaci칩n autom치tica

tama침o_celda = 20  # Todas las posiciones son m칰ltiplos de 20

# Dibuja un tablero de ajedrez con dos tonos de verde
for x in range(-280, 300, tama침o_celda):
    for y in range(-280, 300, tama침o_celda):
        # Alterna colores seg칰n la posici칩n (patr칩n de ajedrez)
        tablero.color(colores_cesped[((x//tama침o_celda)+(y//tama침o_celda)) % 2])

# Cabeza de la serpiente (cuadrado naranja)
head = turtle.Turtle()
head.shape("square")
head.color("orange")
head.goto(0, 0)           # Posici칩n inicial centrada
head.direction = "stop"   # Inicialmente quieta

# Comida (c칤rculo rojo)
food = turtle.Turtle()
food.shape("circle")
food.color("red")
food.goto(0, 100)         # Posici칩n inicial

segments = []  # Lista que almacena los segmentos del cuerpo

# Texto del marcador (puntuaci칩n)
pen = turtle.Turtle()
pen.color("yellow")
pen.goto(0, 260)  # Posici칩n en la parte superior

def go_up():
    if head.direction != "down":  # Evita movimiento contrario
        head.direction = "up"

# Funciones similares para otras direcciones...

def move():
    # Mueve la cabeza exactamente una celda (20px) en la direcci칩n actual
    if head.direction == "up":
        head.sety(head.ycor() + tama침o_celda)
    # ... otras direcciones

wn.listen()
wn.onkeypress(go_up, "Up")      # Flecha arriba
wn.onkeypress(go_down, "Down")  # Flecha abajo
# ... otras teclas

if head.distance(food) < 20:  # Si la cabeza toca la comida
    # Nueva posici칩n aleatoria para la comida (en una celda de la cuadr칤cula)
    food.goto(random.randrange(-280, 281, tama침o_celda), 
              random.randrange(-280, 281, tama침o_celda))
    
    # A침ade nuevo segmento con color c칤clico
    new_segment = turtle.Turtle()
    index_color = len(segments) % len(colores_serpiente)
    new_segment.color(colores_serpiente[index_color])
    
    segments.append(new_segment)  # A침ade a la lista de segmentos
    score += 10  # Aumenta puntuaci칩n

# Mueve cada segmento a la posici칩n del anterior
for index in range(len(segments)-1, 0, -1):
    segments[index].goto(segments[index-1].position())
    
# El primer segmento sigue a la cabeza
if len(segments) > 0:
    segments[0].goto(head.position())
